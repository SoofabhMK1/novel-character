version: '3.8'

services:
  # 数据库服务 (PostgreSQL)
  db:
    image: postgres:15-alpine
    container_name: novel_db_service
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - novel_db_data:/var/lib/postgresql/data
      # - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - novel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    # 暴露端口，映射到主机的 5432 端口 部署到服务端的时候可以注释掉
    ports:
      - "5432:5432"

  migrate:
    build:
      context: ./backend
    # 覆盖 Dockerfile 中的 CMD，执行迁移命令
    command: alembic upgrade head
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy # 等待 db 服务健康后再启动
    networks:
      - novel_network

  seed:
    image: postgres:15-alpine # 使用 postgres 镜像，因为它自带 psql 客户端
    # 将 init.sql 文件挂载到容器中
    volumes:
      - ./init-db/init.sql:/init.sql
    # 覆盖启动命令，使用 psql 执行脚本
    command: >
      sh -c "
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /init.sql
      "
    env_file:
      - ./.env
    depends_on:
      migrate: # <-- 关键：等待 migrate 服务成功完成后再运行
        condition: service_completed_successfully
    networks:
      - novel_network

  # 后端服务 (FastAPI)
  backend:
    build:
      context: ./backend
    container_name: novel_backend_service
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy # 等待 db 服务健康后再启动
    networks:
      - novel_network
    volumes:
      - ./data/character_images:/app/media/character_images

  # 反向代理与 Web 服务器 (Nginx)
  nginx:
    build:
      # 构建上下文是项目根目录
      context: .
      # Dockerfile 的路径是 nginx/Dockerfile
      dockerfile: ./nginx/Dockerfile
    volumes:
      - ./data/character_images:/usr/share/nginx/html/media/character_images
    container_name: novel_nginx_service
    ports:
      - "80:80"
    depends_on:
      - backend # Nginx 只需依赖后端即可
    networks:
      - novel_network

volumes:
  novel_db_data:
    driver: local

networks:
  novel_network:
    driver: bridge